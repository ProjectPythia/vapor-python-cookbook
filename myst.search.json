{"version":"1","records":[{"hierarchy":{"lvl1":"VAPOR Python Cookbook"},"type":"lvl1","url":"/","position":0},{"hierarchy":{"lvl1":"VAPOR Python Cookbook"},"content":"","type":"content","url":"/","position":1},{"hierarchy":{"lvl1":"VAPOR Python Cookbook"},"type":"lvl1","url":"/#vapor-python-cookbook","position":2},{"hierarchy":{"lvl1":"VAPOR Python Cookbook"},"content":"\n\n\n\n\nThis Project Pythia Cookbook provides an overview of the VAPOR Python API with example workflows.","type":"content","url":"/#vapor-python-cookbook","position":3},{"hierarchy":{"lvl1":"VAPOR Python Cookbook","lvl2":"Motivation"},"type":"lvl2","url":"/#motivation","position":4},{"hierarchy":{"lvl1":"VAPOR Python Cookbook","lvl2":"Motivation"},"content":"The Visualization and Analysis Platform for Ocean, Atmosphere, and Solar Researchers (VAPOR) provides an interactive 3D visualization environment for exploratory visual analysis and the production of captivating animations and high-quality images. VAPOR runs on most UNIX and Windows systems equipped with modern 3D graphics cards.","type":"content","url":"/#motivation","position":5},{"hierarchy":{"lvl1":"VAPOR Python Cookbook","lvl2":"Authors"},"type":"lvl2","url":"/#authors","position":6},{"hierarchy":{"lvl1":"VAPOR Python Cookbook","lvl2":"Authors"},"content":"Nihanth W. Cherukuru, \n\nStanislaw ‘Stas’ Jarosynski, \n\nPhilip Austin, \n\nIan Franda","type":"content","url":"/#authors","position":7},{"hierarchy":{"lvl1":"VAPOR Python Cookbook","lvl3":"Contributors","lvl2":"Authors"},"type":"lvl3","url":"/#contributors","position":8},{"hierarchy":{"lvl1":"VAPOR Python Cookbook","lvl3":"Contributors","lvl2":"Authors"},"content":"","type":"content","url":"/#contributors","position":9},{"hierarchy":{"lvl1":"VAPOR Python Cookbook","lvl2":"Structure"},"type":"lvl2","url":"/#structure","position":10},{"hierarchy":{"lvl1":"VAPOR Python Cookbook","lvl2":"Structure"},"content":"This cookbook is divided into three main sections. The “Quickstart” section is a good starting point for a general overview of VAPOR’s features and capabilities. The “Foundations” section gives more detailed examples for specific features in VAPOR. The “Example Workflows” section provides practical examples to see VAPOR in action and to gain an understanding of various workflows. Feel free to visit the sections that best fit your needs -- it’s not necessary to follow them sequentially!","type":"content","url":"/#structure","position":11},{"hierarchy":{"lvl1":"VAPOR Python Cookbook","lvl3":"VAPOR Foundations","lvl2":"Structure"},"type":"lvl3","url":"/#vapor-foundations","position":12},{"hierarchy":{"lvl1":"VAPOR Python Cookbook","lvl3":"VAPOR Foundations","lvl2":"Structure"},"content":"The foundation section gives a quick overview of the major components of VAPOR python. These include the funcationality to load/read data, set camera parameters, annotations, save animations and images, implementing renderes for data visualization.\n\nAdditionally, the links below can serve as a helpful reference.\n\nDiscussion Forum\n\nDiscussion forum for VAPOR.\n\nPython API Reference\n\nUse this to delve deeper into the python classes\n\nVAPOR GUI\n\nGUI version provides a graphical interface for VAPOR","type":"content","url":"/#vapor-foundations","position":13},{"hierarchy":{"lvl1":"VAPOR Python Cookbook","lvl3":"Example Workflows","lvl2":"Structure"},"type":"lvl3","url":"/#example-workflows","position":14},{"hierarchy":{"lvl1":"VAPOR Python Cookbook","lvl3":"Example Workflows","lvl2":"Structure"},"content":"The example workflows section provides examples showing and end-end pipeline for analysis and visualization using VAPOR python.","type":"content","url":"/#example-workflows","position":15},{"hierarchy":{"lvl1":"VAPOR Python Cookbook","lvl2":"Running the Notebooks"},"type":"lvl2","url":"/#running-the-notebooks","position":16},{"hierarchy":{"lvl1":"VAPOR Python Cookbook","lvl2":"Running the Notebooks"},"content":"These notebooks cannot be run on Binder at the moment and need to be run on your machine.","type":"content","url":"/#running-the-notebooks","position":17},{"hierarchy":{"lvl1":"VAPOR Python Cookbook","lvl3":"Running on Your Machine","lvl2":"Running the Notebooks"},"type":"lvl3","url":"/#running-on-your-machine","position":18},{"hierarchy":{"lvl1":"VAPOR Python Cookbook","lvl3":"Running on Your Machine","lvl2":"Running the Notebooks"},"content":"If you are interested in running this material locally on your computer, you will need to follow this workflow:\n\nClone the https://github.com/ProjectPythia/vapor-python-cookbook repository: git clone https://github.com/ProjectPythia/vapor-python-cookbook.git\n\nMove into the vapor-python-cookbook directorycd vapor-python-cookbook\n\nCreate and activate your conda environment from the environment.yml fileconda env create -f vapor_environment.yml\nconda activate vapor-cookbook-dev\n\nMove into the notebooks directory and start up Jupyterlabcd notebooks/\njupyter lab\n\nAt this point, you can interact with the notebooks! Make sure to check out the “\n\nGetting Started with Jupyter” content from the \n\nPythia Foundations material if you are new to Jupyter or need a refresher.","type":"content","url":"/#running-on-your-machine","position":19},{"hierarchy":{"lvl1":"AGU 2023 Tutorial: Visualizing 2D and 3D Geoscience Data in Python"},"type":"lvl1","url":"/notebooks/agu-2023-example","position":0},{"hierarchy":{"lvl1":"AGU 2023 Tutorial: Visualizing 2D and 3D Geoscience Data in Python"},"content":"","type":"content","url":"/notebooks/agu-2023-example","position":1},{"hierarchy":{"lvl1":"AGU 2023 Tutorial: Visualizing 2D and 3D Geoscience Data in Python","lvl2":"Set “homeDir” to example data directory"},"type":"lvl2","url":"/notebooks/agu-2023-example#set-homedir-to-example-data-directory","position":2},{"hierarchy":{"lvl1":"AGU 2023 Tutorial: Visualizing 2D and 3D Geoscience Data in Python","lvl2":"Set “homeDir” to example data directory"},"content":"","type":"content","url":"/notebooks/agu-2023-example#set-homedir-to-example-data-directory","position":3},{"hierarchy":{"lvl1":"AGU 2023 Tutorial: Visualizing 2D and 3D Geoscience Data in Python","lvl2":"Download example data here"},"type":"lvl2","url":"/notebooks/agu-2023-example#download-example-data-here","position":4},{"hierarchy":{"lvl1":"AGU 2023 Tutorial: Visualizing 2D and 3D Geoscience Data in Python","lvl2":"Download example data here"},"content":"\n\n#homeDir = \"/Users/pearse/Examples/AGU2023\"\nhomeDir = \"/Users/pearse/Downloads/AGU2023\"\n\n","type":"content","url":"/notebooks/agu-2023-example#download-example-data-here","position":5},{"hierarchy":{"lvl1":"AGU 2023 Tutorial: Visualizing 2D and 3D Geoscience Data in Python","lvl2":"Create a new Session"},"type":"lvl2","url":"/notebooks/agu-2023-example#create-a-new-session","position":6},{"hierarchy":{"lvl1":"AGU 2023 Tutorial: Visualizing 2D and 3D Geoscience Data in Python","lvl2":"Create a new Session"},"content":"\n\nfrom vapor import session\nses = session.Session()\n\n","type":"content","url":"/notebooks/agu-2023-example#create-a-new-session","position":7},{"hierarchy":{"lvl1":"AGU 2023 Tutorial: Visualizing 2D and 3D Geoscience Data in Python","lvl2":"Find documentation"},"type":"lvl2","url":"/notebooks/agu-2023-example#find-documentation","position":8},{"hierarchy":{"lvl1":"AGU 2023 Tutorial: Visualizing 2D and 3D Geoscience Data in Python","lvl2":"Find documentation"},"content":"\n\nhelp(session.Session)\n\n# Renderer  - help(renderer.Renderer)\n# Camera    - help(camera.Camera)\n# Animation - help(animation.Amimation)\n# https://ncar.github.io/VaporDocumentationWebsite/pythonAPIReference/classReference.html\n\n","type":"content","url":"/notebooks/agu-2023-example#find-documentation","position":9},{"hierarchy":{"lvl1":"AGU 2023 Tutorial: Visualizing 2D and 3D Geoscience Data in Python","lvl2":"Load data"},"type":"lvl2","url":"/notebooks/agu-2023-example#load-data","position":10},{"hierarchy":{"lvl1":"AGU 2023 Tutorial: Visualizing 2D and 3D Geoscience Data in Python","lvl2":"Load data"},"content":"\n\nfrom pathlib import Path\nmyPath  = homeDir + \"/data\"\nmyFiles = [str(file) for file in Path(myPath).rglob('*')]\n\nfor file_path in myFiles:\n    print(file_path)\n\nfrom vapor import dataset\ndata = ses.OpenDataset(dataset.WRF, myFiles)\n\n","type":"content","url":"/notebooks/agu-2023-example#load-data","position":11},{"hierarchy":{"lvl1":"AGU 2023 Tutorial: Visualizing 2D and 3D Geoscience Data in Python","lvl2":"Show dataset metadata"},"type":"lvl2","url":"/notebooks/agu-2023-example#show-dataset-metadata","position":12},{"hierarchy":{"lvl1":"AGU 2023 Tutorial: Visualizing 2D and 3D Geoscience Data in Python","lvl2":"Show dataset metadata"},"content":"\n\n","type":"content","url":"/notebooks/agu-2023-example#show-dataset-metadata","position":13},{"hierarchy":{"lvl1":"AGU 2023 Tutorial: Visualizing 2D and 3D Geoscience Data in Python","lvl3":"Coordinate variables","lvl2":"Show dataset metadata"},"type":"lvl3","url":"/notebooks/agu-2023-example#coordinate-variables","position":14},{"hierarchy":{"lvl1":"AGU 2023 Tutorial: Visualizing 2D and 3D Geoscience Data in Python","lvl3":"Coordinate variables","lvl2":"Show dataset metadata"},"content":"\n\nprint(\"Time Coordinate Variable Name:\", data.GetTimeCoordVarName())\nprint(\"Coordinate Variable Names:\", data.GetCoordVarNames())\n\n","type":"content","url":"/notebooks/agu-2023-example#coordinate-variables","position":15},{"hierarchy":{"lvl1":"AGU 2023 Tutorial: Visualizing 2D and 3D Geoscience Data in Python","lvl3":"Variables","lvl2":"Show dataset metadata"},"type":"lvl3","url":"/notebooks/agu-2023-example#variables","position":16},{"hierarchy":{"lvl1":"AGU 2023 Tutorial: Visualizing 2D and 3D Geoscience Data in Python","lvl3":"Variables","lvl2":"Show dataset metadata"},"content":"\n\nprint(\"Data Variables:\")\nfor var in data.GetDataVarNames():\n    print(f\"  {var}\")\n    print(f\"    Time Varying:\", bool(data.IsTimeVarying(var)))\n    print(f\"    Dimensionality:\", data.GetVarGeometryDim(var))\n    print(f\"    Coordinates:\", data.GetVarCoordVars(var, True))\n    print(\"     Data Range:\", data.GetDataRange(var))\n\n","type":"content","url":"/notebooks/agu-2023-example#variables","position":17},{"hierarchy":{"lvl1":"AGU 2023 Tutorial: Visualizing 2D and 3D Geoscience Data in Python","lvl2":"Create a 2D Data renderer"},"type":"lvl2","url":"/notebooks/agu-2023-example#create-a-2d-data-renderer","position":18},{"hierarchy":{"lvl1":"AGU 2023 Tutorial: Visualizing 2D and 3D Geoscience Data in Python","lvl2":"Create a 2D Data renderer"},"content":"\n\nfrom vapor import renderer\nren = data.NewRenderer(renderer.TwoDDataRenderer)\nren.SetVariableName(\"FIRE_AREA\") # Set to first 2D data variable\n\n","type":"content","url":"/notebooks/agu-2023-example#create-a-2d-data-renderer","position":19},{"hierarchy":{"lvl1":"AGU 2023 Tutorial: Visualizing 2D and 3D Geoscience Data in Python","lvl2":"Show the renderer"},"type":"lvl2","url":"/notebooks/agu-2023-example#show-the-renderer","position":20},{"hierarchy":{"lvl1":"AGU 2023 Tutorial: Visualizing 2D and 3D Geoscience Data in Python","lvl2":"Show the renderer"},"content":"\n\nses.Show()\n\n","type":"content","url":"/notebooks/agu-2023-example#show-the-renderer","position":21},{"hierarchy":{"lvl1":"AGU 2023 Tutorial: Visualizing 2D and 3D Geoscience Data in Python","lvl2":"Apply a height variable"},"type":"lvl2","url":"/notebooks/agu-2023-example#apply-a-height-variable","position":22},{"hierarchy":{"lvl1":"AGU 2023 Tutorial: Visualizing 2D and 3D Geoscience Data in Python","lvl2":"Apply a height variable"},"content":"\n\nren.SetHeightVariableName(\"HGT\")\nses.Show()\n\n","type":"content","url":"/notebooks/agu-2023-example#apply-a-height-variable","position":23},{"hierarchy":{"lvl1":"AGU 2023 Tutorial: Visualizing 2D and 3D Geoscience Data in Python","lvl2":"Create an interactive Visualizer with VaporVisualizerWidget()"},"type":"lvl2","url":"/notebooks/agu-2023-example#create-an-interactive-visualizer-with-vaporvisualizerwidget","position":24},{"hierarchy":{"lvl1":"AGU 2023 Tutorial: Visualizing 2D and 3D Geoscience Data in Python","lvl2":"Create an interactive Visualizer with VaporVisualizerWidget()"},"content":"\n\nfrom vapor import widget\nviz = widget.VaporVisualizerWidget(ses)\nviz.Render()\nviz\n\n","type":"content","url":"/notebooks/agu-2023-example#create-an-interactive-visualizer-with-vaporvisualizerwidget","position":25},{"hierarchy":{"lvl1":"AGU 2023 Tutorial: Visualizing 2D and 3D Geoscience Data in Python","lvl2":"Show a Transfer Function"},"type":"lvl2","url":"/notebooks/agu-2023-example#show-a-transfer-function","position":26},{"hierarchy":{"lvl1":"AGU 2023 Tutorial: Visualizing 2D and 3D Geoscience Data in Python","lvl2":"Show a Transfer Function"},"content":"\n\nfrom vapor.utils import histogram\nhistogram.ShowMatPlotLibHistogram(ses, ren)\n\n","type":"content","url":"/notebooks/agu-2023-example#show-a-transfer-function","position":27},{"hierarchy":{"lvl1":"AGU 2023 Tutorial: Visualizing 2D and 3D Geoscience Data in Python","lvl2":"Apply opacity to a Transfer Function"},"type":"lvl2","url":"/notebooks/agu-2023-example#apply-opacity-to-a-transfer-function","position":28},{"hierarchy":{"lvl1":"AGU 2023 Tutorial: Visualizing 2D and 3D Geoscience Data in Python","lvl2":"Apply opacity to a Transfer Function"},"content":"\n\nplt = histogram.GetMatPlotLibHistogram(ses, ren)\nopacities = [(0.2, 0), (0.8, 1)]\nplt.plot(*zip(*opacities))\nplt.show()\n\n","type":"content","url":"/notebooks/agu-2023-example#apply-opacity-to-a-transfer-function","position":29},{"hierarchy":{"lvl1":"AGU 2023 Tutorial: Visualizing 2D and 3D Geoscience Data in Python","lvl2":"Render the current Session in an interactive Visualizer"},"type":"lvl2","url":"/notebooks/agu-2023-example#render-the-current-session-in-an-interactive-visualizer","position":30},{"hierarchy":{"lvl1":"AGU 2023 Tutorial: Visualizing 2D and 3D Geoscience Data in Python","lvl2":"Render the current Session in an interactive Visualizer"},"content":"\n\ntf = ren.GetPrimaryTransferFunction()\ntf.SetOpacityControlPoints(opacities)\nviz.Render()\nviz\n\n","type":"content","url":"/notebooks/agu-2023-example#render-the-current-session-in-an-interactive-visualizer","position":31},{"hierarchy":{"lvl1":"AGU 2023 Tutorial: Visualizing 2D and 3D Geoscience Data in Python","lvl2":"Load a builtin Transfer Function"},"type":"lvl2","url":"/notebooks/agu-2023-example#load-a-builtin-transfer-function","position":32},{"hierarchy":{"lvl1":"AGU 2023 Tutorial: Visualizing 2D and 3D Geoscience Data in Python","lvl2":"Load a builtin Transfer Function"},"content":"\n\ntf.LoadBuiltinColormap(\"Sequential/BlackBody\")\nviz.Render()\nviz\n\n","type":"content","url":"/notebooks/agu-2023-example#load-a-builtin-transfer-function","position":33},{"hierarchy":{"lvl1":"AGU 2023 Tutorial: Visualizing 2D and 3D Geoscience Data in Python","lvl2":"Load a Transfer Function that was configured in VAPOR"},"type":"lvl2","url":"/notebooks/agu-2023-example#load-a-transfer-function-that-was-configured-in-vapor","position":34},{"hierarchy":{"lvl1":"AGU 2023 Tutorial: Visualizing 2D and 3D Geoscience Data in Python","lvl2":"Load a Transfer Function that was configured in VAPOR"},"content":"\n\ntf.LoadColormapFromFile( homeDir + \"/fireArea.tf3\")\nviz.Render()\nviz\n\n","type":"content","url":"/notebooks/agu-2023-example#load-a-transfer-function-that-was-configured-in-vapor","position":35},{"hierarchy":{"lvl1":"AGU 2023 Tutorial: Visualizing 2D and 3D Geoscience Data in Python","lvl2":"Interactive Sliders - Open visualizer_widget_example.ipynb"},"type":"lvl2","url":"/notebooks/agu-2023-example#interactive-sliders-open-visualizer-widget-example-ipynb","position":36},{"hierarchy":{"lvl1":"AGU 2023 Tutorial: Visualizing 2D and 3D Geoscience Data in Python","lvl2":"Interactive Sliders - Open visualizer_widget_example.ipynb"},"content":"\n\n","type":"content","url":"/notebooks/agu-2023-example#interactive-sliders-open-visualizer-widget-example-ipynb","position":37},{"hierarchy":{"lvl1":"AGU 2023 Tutorial: Visualizing 2D and 3D Geoscience Data in Python","lvl2":"*** Back to VAPOR for DVR and Python Engine ***"},"type":"lvl2","url":"/notebooks/agu-2023-example#id-back-to-vapor-for-dvr-and-python-engine","position":38},{"hierarchy":{"lvl1":"AGU 2023 Tutorial: Visualizing 2D and 3D Geoscience Data in Python","lvl2":"*** Back to VAPOR for DVR and Python Engine ***"},"content":"\n\n","type":"content","url":"/notebooks/agu-2023-example#id-back-to-vapor-for-dvr-and-python-engine","position":39},{"hierarchy":{"lvl1":"AGU 2023 Tutorial: Visualizing 2D and 3D Geoscience Data in Python","lvl2":"Timeseries Animation"},"type":"lvl2","url":"/notebooks/agu-2023-example#timeseries-animation","position":40},{"hierarchy":{"lvl1":"AGU 2023 Tutorial: Visualizing 2D and 3D Geoscience Data in Python","lvl2":"Timeseries Animation"},"content":"\n\n%%time\nfrom vapor.animation import Animation\nses.Load( homeDir + \"/et_1.vs3\")\nanim = Animation(ses)\ntimesteps = ses.GetTimesteps()\nfor ts in range(0, timesteps):\n    ses.SetTimestep(ts)\n    anim.CaptureFrame()\nanim.ShowInteractive()\n\n","type":"content","url":"/notebooks/agu-2023-example#timeseries-animation","position":41},{"hierarchy":{"lvl1":"AGU 2023 Tutorial: Visualizing 2D and 3D Geoscience Data in Python","lvl2":"Keyframing"},"type":"lvl2","url":"/notebooks/agu-2023-example#keyframing","position":42},{"hierarchy":{"lvl1":"AGU 2023 Tutorial: Visualizing 2D and 3D Geoscience Data in Python","lvl2":"Keyframing"},"content":"\n\n# Import necessary modules\n\nfrom vapor import session, camera\n\n# Acquire the camera settings from an initial session file\n\nses1 = session.Session()\n#ses1.Load(\"/Users/pearse/Examples/eastTroublesome/et_1.vs3\")\nses1.Load(homeDir + \"/et_1.vs3\")\n#ses1.Load(\"~/Examples/eastTroublesome/et_1.vs3\")\n\ncam1 = ses1.GetCamera()\ndir1 = cam1.GetDirection()\npos1 = cam1.GetPosition()\nup1 = cam1.GetUp()\n\n# Acquire the camera settings from a secondary session file that we will transition into\n\nses2 = session.Session()\nses2.Load( homeDir + \"/et_2.vs3\")\ncam2 = ses2.GetCamera()\ndir2 = cam2.GetDirection()\npos2 = cam2.GetPosition()\nup2 = cam2.GetUp()\n\n# Difference between camera positions on each axis\ndPositionX  = (pos2[0] - pos1[0])\ndPositionY  = (pos2[1] - pos1[1])\ndPositionZ  = (pos2[2] - pos1[2])\n\n# Difference between camera direction vectors on each axis\ndDirectionX = (dir2[0] - dir1[0])\ndDirectionY = (dir2[1] - dir1[1])\ndDirectionZ = (dir2[2] - dir1[2])\n\n# Difference between camera up vectors on each axis\ndUpX        = (up2[0] - up1[0])\ndUpY        = (up2[1] - up1[1])\ndUpZ        = (up2[2] - up1[2])\n\n# Perform a linear interoplation between the Camera's start position, direction, and up vector\n\nsteps=50\nfor i in range(0,steps):\n    position = [\n        pos1[0]+dPositionX*i/steps,\n        pos1[1]+dPositionY*i/steps,\n        pos1[2]+dPositionZ*i/steps\n    ]\n    cam1.SetPosition( position )\n\n    direction = [\n        dir1[0]+dDirectionX*i/steps,\n        dir1[1]+dDirectionY*i/steps,\n        dir1[2]+dDirectionZ*i/steps\n    ]\n    cam1.SetDirection( direction )\n\n    up = [\n        up1[0]+dUpX*i/steps,\n        up1[1]+dUpY*i/steps,\n        up1[2]+dUpZ*i/steps\n    ]\n    cam1.SetUp( up )\n    ses1.Render( homeDir + \"captures/\" + str(i) + \".png\")\n\n","type":"content","url":"/notebooks/agu-2023-example#keyframing","position":43},{"hierarchy":{"lvl1":"AGU 2023 Tutorial: Visualizing 2D and 3D Geoscience Data in Python","lvl2":"Camera Orbit"},"type":"lvl2","url":"/notebooks/agu-2023-example#camera-orbit","position":44},{"hierarchy":{"lvl1":"AGU 2023 Tutorial: Visualizing 2D and 3D Geoscience Data in Python","lvl2":"Camera Orbit"},"content":"\n\n# Import necessary modules\n\nimport cv2, os\nfrom vapor import session, animation\nfrom numpy import cross, eye, dot, radians, asarray, array\nfrom scipy.linalg import expm, norm\nUseValueFromSessionFile = None\n\n# Configure various parameters for rotating the camera around the scene\nsession_path = homeDir + \"/et_2.vs3\"\noutput = \"rotation.mp4\"\nvideo_framerate = 30\nvideo_resolution = (640, 480)\ndata_timestep_framerate = 0  # set to zero to disable\nduration = 4  # seconds\nrotate_speed = 45  # deg/s\nrotation_axis = [0,0,1]  # Z (up)\nrotation_center = UseValueFromSessionFile  # Can be replaced with [x,y,z] coordinates here\nsave_individual_frames = False\n\n# Configure our session according to the parameters that were defined above\n\nsession_path, output = [os.path.expanduser(p) for p in (session_path, output)]\nn_frames = video_framerate * duration\n\nses = session.Session()\nses.Load(session_path)\nses.SetResolution(*video_resolution)\ncam = ses.GetCamera()\npos, dir, up, tgt = [asarray(x) for x in [cam.GetPosition(), cam.GetDirection(), cam.GetUp(), cam.GetTarget()]]\nif rotation_center:\n    tgt = asarray(rotation_center)\n\n# Define a function that returns a matrix exponential for rotating the camera \n\ndef rotation_matrix(axis, theta):\n    return expm(cross(eye(3), axis / norm(axis) * theta))\n\nanim = animation.Animation(ses)\nfor i in range(0, n_frames):\n    print(f\"Rendering... [{'#'*round(40*i/(n_frames-1))}{' '*round(40*(1-i/(n_frames-1)))}] {100*(i+1)/n_frames:.0f}%\", end=\"\\r\" if i < n_frames-1 else \"\\n\")\n\n    ses.SetTimestep(int(data_timestep_framerate * i / video_framerate))\n\n    M = rotation_matrix(rotation_axis, radians(rotate_speed) * i / video_framerate)\n    cam.SetPosition(dot(M, pos - tgt) + tgt)\n    cam.SetDirection(dot(M, dir))\n    cam.SetUp(dot(M, up))\n    anim.CaptureFrame()\n    if save_individual_frames:\n        ses.Render(f\"{output}_{i:04}.png\")\n\nanim.SaveMP4(output, video_framerate)","type":"content","url":"/notebooks/agu-2023-example#camera-orbit","position":45},{"hierarchy":{"lvl1":"Creating Animations"},"type":"lvl1","url":"/notebooks/animation-example","position":0},{"hierarchy":{"lvl1":"Creating Animations"},"content":"import example_utils\nfrom vapor import session, renderer, dataset, camera\nfrom vapor.animation import Animation\n\nses = session.Session()\ndata = example_utils.OpenExampleDataset(ses)\ndimension = 2\nU,V = data.GetDataVarNames(dimension)[0:2]\n\nren:renderer.FlowRenderer = data.NewRenderer(renderer.FlowRenderer)\nren.SetFieldVariableNames([U, V])\nses.GetCamera().ViewAll()\nren.SetRenderType(ren.RenderType.RenderTypeStream)\nren.SetRenderRadiusScalar(3)\nren.SetRenderGeom3D(True)\nren.SetColorMapVariableName(U)\n# ses.Show()\n\nanim = Animation(ses)\nfor i in range(0, 200, 2):\n    ren.SetSteadyNumOfSteps(i)\n    anim.CaptureFrame()\n    print(f\"Rendering Animation [{'#'*round(i/5)}{' '*round(40-i/5)}] {(i+1)/2:.0f}%\", end=\"\\r\")\nanim.Show()\n\nanim.ShowInteractive()\n\nanim.SaveMP4(\"test.mp4\")","type":"content","url":"/notebooks/animation-example","position":1},{"hierarchy":{"lvl1":"Annotations"},"type":"lvl1","url":"/notebooks/annotation-example","position":0},{"hierarchy":{"lvl1":"Annotations"},"content":"You can annotate your renderings using Vapor’s build in annotations as well as MatPlotLib\n\nimport example_utils\nfrom vapor import session, renderer, dataset, camera\nfrom vapor.utils import histogram\n\nses = session.Session()\ndata = example_utils.OpenExampleDataset(ses)\n\nren = data.NewRenderer(renderer.TwoDDataRenderer)\nren.SetVariableName(data.GetDataVarNames(2)[1])\nses.GetCamera().ViewAll()\n\n","type":"content","url":"/notebooks/annotation-example","position":1},{"hierarchy":{"lvl1":"Annotations","lvl2":"Vapor Colorbars"},"type":"lvl2","url":"/notebooks/annotation-example#vapor-colorbars","position":2},{"hierarchy":{"lvl1":"Annotations","lvl2":"Vapor Colorbars"},"content":"\n\n# Show the basic colorbar annotation for a renderer\ncolorbar = ren.GetColorbarAnnotation()\ncolorbar.SetEnabled(True)\nses.Show()\n\n# Customized colorbar annotation\ncolorbar.SetSize((0.2, 0.25))\ncolorbar.SetTitle(\"Colorbar Title\")\ncolorbar.SetCornerPosition((0.95, 0.95))\nses.Show()\n\n","type":"content","url":"/notebooks/annotation-example#vapor-colorbars","position":3},{"hierarchy":{"lvl1":"Annotations","lvl2":"MatPlotLib Colorbars"},"type":"lvl2","url":"/notebooks/annotation-example#matplotlib-colorbars","position":4},{"hierarchy":{"lvl1":"Annotations","lvl2":"MatPlotLib Colorbars"},"content":"You can customize the histograms as you would MatPlotLib’s pylab.colorbar\n\ntf = ren.GetPrimaryTransferFunction()\ntf.ShowMatPlotLibColorbar()\n\ntf.ShowMatPlotLibColorbar(orientation=\"vertical\", figsize=(1.5,4))\n\n# The MatPlotLib Colorbars are automatically synced to Vapor's transfer functions\ntf.LoadBuiltinColormap(tf.ListBuiltinColormaps()[7])\nses.Show()\ntf.ShowMatPlotLibColorbar()\n\ncolorbar.SetEnabled(False)\n\n","type":"content","url":"/notebooks/annotation-example#matplotlib-colorbars","position":5},{"hierarchy":{"lvl1":"Annotations","lvl2":"MatPlotLib Histograms"},"type":"lvl2","url":"/notebooks/annotation-example#matplotlib-histograms","position":6},{"hierarchy":{"lvl1":"Annotations","lvl2":"MatPlotLib Histograms"},"content":"\n\nhistogram.ShowMatPlotLibHistogram(ses, ren)\n\n\n\nYou can customize the histograms as you would matplotlib.pyplot.hist\n\nplt = histogram.GetMatPlotLibHistogram(ses, ren, color =\"red\")\nplt.xlabel(\"X-Axis\")\nplt.ylabel(\"Y-Axis\")\nplt.title(\"Title\\n\", fontweight=\"bold\")\nplt.show()\n\n","type":"content","url":"/notebooks/annotation-example#matplotlib-histograms","position":7},{"hierarchy":{"lvl1":"Annotations","lvl2":"Axis Annotations"},"type":"lvl2","url":"/notebooks/annotation-example#axis-annotations","position":8},{"hierarchy":{"lvl1":"Annotations","lvl2":"Axis Annotations"},"content":"\n\naxis = ses.GetAxisAnnotations()\naxis.SetAxisAnnotationEnabled(True)\nses.Show()\n\naxis.SetNumTics((5,5))\naxis.SetAxisFontSize(24)\nses.Show()\n\n# This example dataset is not geo-referenced\n# axis.SetLatLonAxesEnabled(True)\n\naxis.SetAxisAnnotationEnabled(False)\n\n","type":"content","url":"/notebooks/annotation-example#axis-annotations","position":9},{"hierarchy":{"lvl1":"Annotations","lvl2":"Scene Annotations"},"type":"lvl2","url":"/notebooks/annotation-example#scene-annotations","position":10},{"hierarchy":{"lvl1":"Annotations","lvl2":"Scene Annotations"},"content":"Scene annotations are other annotations and rendering options that apply to the entire rendering such as background color.\n\nscene = ses.GetSceneAnnotations()\nscene.SetBackgroundColor((1,1,1))\nscene.SetUseDomainFrame(False)\nses.Show()\n\nscene.SetAxisArrowEnabled(True)\nscene.SetAxisArrowSize(0.4)\n\nscene.SetTimeType(scene.TimeAnnotationType.Timestep)\nscene.SetTimeColor((0,0,0))\nscene.SetTimeLLX(0.7)\n\nses.Show()","type":"content","url":"/notebooks/annotation-example#scene-annotations","position":11},{"hierarchy":{"lvl1":"Controlling the Camera"},"type":"lvl1","url":"/notebooks/camera-example","position":0},{"hierarchy":{"lvl1":"Controlling the Camera"},"content":"Vapor provides several functions to control the camera position and direction. Here are a few examples.\n\nimport example_utils\nfrom vapor import session, renderer, dataset, camera\n\nses = session.Session()\ndata = example_utils.OpenExampleDataset(ses)\n\nren = data.NewRenderer(renderer.VolumeIsoRenderer)\nren.SetIsoValues([-0.10, 0.2])\n\n# Show 3D orientation arrows.\nses.GetSceneAnnotations().SetAxisArrowEnabled(True)\n\ncam = ses.GetCamera()\n\n","type":"content","url":"/notebooks/camera-example","position":1},{"hierarchy":{"lvl1":"Controlling the Camera","lvl2":"View All"},"type":"lvl2","url":"/notebooks/camera-example#view-all","position":2},{"hierarchy":{"lvl1":"Controlling the Camera","lvl2":"View All"},"content":"\n\nhelp(cam.ViewAll)\ncam.ViewAll()\nses.Show()\n\n","type":"content","url":"/notebooks/camera-example#view-all","position":3},{"hierarchy":{"lvl1":"Controlling the Camera","lvl2":"Align View"},"type":"lvl2","url":"/notebooks/camera-example#align-view","position":4},{"hierarchy":{"lvl1":"Controlling the Camera","lvl2":"Align View"},"content":"\n\nhelp(cam.AlignView)\ncam.AlignView(\"-X\")\nses.Show()\n\n","type":"content","url":"/notebooks/camera-example#align-view","position":5},{"hierarchy":{"lvl1":"Controlling the Camera","lvl2":"Zoom"},"type":"lvl2","url":"/notebooks/camera-example#zoom","position":6},{"hierarchy":{"lvl1":"Controlling the Camera","lvl2":"Zoom"},"content":"\n\nhelp(cam.Zoom)\ncam.Zoom(-0.4)\nses.Show()\n\n","type":"content","url":"/notebooks/camera-example#zoom","position":7},{"hierarchy":{"lvl1":"Controlling the Camera","lvl2":"Look At"},"type":"lvl2","url":"/notebooks/camera-example#look-at","position":8},{"hierarchy":{"lvl1":"Controlling the Camera","lvl2":"Look At"},"content":"\n\nhelp(cam.LookAt)\ncam.LookAt((32, -100, 100), ren.GetTransform().GetOrigin())\nses.Show()","type":"content","url":"/notebooks/camera-example#look-at","position":9},{"hierarchy":{"lvl1":"Visualizing the cloud-capped boundary layer"},"type":"lvl1","url":"/notebooks/cloudfield-visualizer","position":0},{"hierarchy":{"lvl1":"Visualizing the cloud-capped boundary layer"},"content":"Data is from a large eddy simulation of trade cumulus clouds.\n\nSingle timestep at 12.5 m x, y, z grid spacing\n\nVariable is QN -- cloud liquid water (g/kg)\n\n","type":"content","url":"/notebooks/cloudfield-visualizer","position":1},{"hierarchy":{"lvl1":"Visualizing the cloud-capped boundary layer","lvl2":"link to data file"},"type":"lvl2","url":"/notebooks/cloudfield-visualizer#link-to-data-file","position":2},{"hierarchy":{"lvl1":"Visualizing the cloud-capped boundary layer","lvl2":"link to data file"},"content":"The netcdf file:  bomex_qv_qn.nc -- 527 Mbytes [https://drive.google.com/file/d/1E0IORCCpZUGaMClbv2m4YFfiM34kC1FY/view?usp=sharing](https://drive.google.com/file/d/1E0IORCCpZUGaMClbv2m4YFfiM34kC1FY/view?usp=sharing) \n\nimport xarray as xr\nfrom pathlib import Path\nfrom vapor import session, renderer, dataset, camera\n\n","type":"content","url":"/notebooks/cloudfield-visualizer#link-to-data-file","position":3},{"hierarchy":{"lvl1":"Visualizing the cloud-capped boundary layer","lvl2":"adjust path to point to file"},"type":"lvl2","url":"/notebooks/cloudfield-visualizer#adjust-path-to-point-to-file","position":4},{"hierarchy":{"lvl1":"Visualizing the cloud-capped boundary layer","lvl2":"adjust path to point to file"},"content":"\n\nthe_file = Path().resolve() / 'bomex_qv_qn.nc'\nprint(the_file)\nthe_file.exists()\n\n","type":"content","url":"/notebooks/cloudfield-visualizer#adjust-path-to-point-to-file","position":5},{"hierarchy":{"lvl1":"Visualizing the cloud-capped boundary layer","lvl2":"Inspect the xarray dataset"},"type":"lvl2","url":"/notebooks/cloudfield-visualizer#inspect-the-xarray-dataset","position":6},{"hierarchy":{"lvl1":"Visualizing the cloud-capped boundary layer","lvl2":"Inspect the xarray dataset"},"content":"\n\nbomex_data = xr.open_dataset(the_file)\nbomex_data\n\n","type":"content","url":"/notebooks/cloudfield-visualizer#inspect-the-xarray-dataset","position":7},{"hierarchy":{"lvl1":"Visualizing the cloud-capped boundary layer","lvl2":"open as a Vapor dataset"},"type":"lvl2","url":"/notebooks/cloudfield-visualizer#open-as-a-vapor-dataset","position":8},{"hierarchy":{"lvl1":"Visualizing the cloud-capped boundary layer","lvl2":"open as a Vapor dataset"},"content":"\n\nses = session.Session()\ndata = ses.OpenDataset(dataset.CF, [str(the_file)])\nses.Load('session.vs3')\n\nprint(\"Time Coordinate Variable Name:\", data.GetTimeCoordVarName())\nprint(\"Coordinate Variable Names:\", data.GetCoordVarNames())\n\nprint(\"Dimensions:\")\nfor dim in data.GetDimensionNames():\n    print(f\"  {dim}:\", data.GetDimensionLength(dim, 0))\n\nprint(\"Data Variables:\")\nfor var in data.GetDataVarNames():\n    print(f\"  {var}\")\n    print(f\"    Time Varying:\", bool(data.IsTimeVarying(var)))\n    print(f\"    Dimensionality:\", data.GetVarGeometryDim(var))\n    print(f\"    Coordinates:\", data.GetVarCoordVars(var, True))\n    print(\"     Data Range:\", data.GetDataRange(var))\n\n","type":"content","url":"/notebooks/cloudfield-visualizer#open-as-a-vapor-dataset","position":9},{"hierarchy":{"lvl1":"Visualizing the cloud-capped boundary layer","lvl2":"Show gridcells"},"type":"lvl2","url":"/notebooks/cloudfield-visualizer#show-gridcells","position":10},{"hierarchy":{"lvl1":"Visualizing the cloud-capped boundary layer","lvl2":"Show gridcells"},"content":"Red: watervapor\n\nGrey: cloud liquid water\n\nTop view of cloud field, with condensation threshold set to 0.01 g/kg\n\nren = data.NewRenderer(renderer.VolumeIsoRenderer)\nren.SetVariableName(data.GetDataVarNames(3)[0]) # Set to first 3D data variable\nren.SetIsoValues([0.01])\n\nses.GetCamera().ViewAll()\nses.Show()\n\n","type":"content","url":"/notebooks/cloudfield-visualizer#show-gridcells","position":11},{"hierarchy":{"lvl1":"Visualizing the cloud-capped boundary layer","lvl2":"Create visualizer widget"},"type":"lvl2","url":"/notebooks/cloudfield-visualizer#create-visualizer-widget","position":12},{"hierarchy":{"lvl1":"Visualizing the cloud-capped boundary layer","lvl2":"Create visualizer widget"},"content":"\n\nfrom jupyter_vapor_widget import *\n\nviz = VaporVisualizerWidget(ses)\nviz\n\n","type":"content","url":"/notebooks/cloudfield-visualizer#create-visualizer-widget","position":13},{"hierarchy":{"lvl1":"Visualizing the cloud-capped boundary layer","lvl2":"Add a slider bar"},"type":"lvl2","url":"/notebooks/cloudfield-visualizer#add-a-slider-bar","position":14},{"hierarchy":{"lvl1":"Visualizing the cloud-capped boundary layer","lvl2":"Add a slider bar"},"content":"\n\ntf = ren.GetPrimaryTransferFunction()\ndataRange = tf.GetMinMaxMapValue()\n\ndef sliderChanged(change):\n    ren.SetIsoValues([change.new])\n    viz.Render(fast=True)\n\nslider = widgets.FloatSlider(value=ren.GetIsoValues()[0], min=dataRange[0], max=dataRange[1], step=(dataRange[1]-dataRange[0])/100)\nslider.observe(sliderChanged, names='value')\n\nwidgets.VBox([\n    viz,\n    widgets.HBox([widgets.Label(\"Iso value:\"), slider])\n])","type":"content","url":"/notebooks/cloudfield-visualizer#add-a-slider-bar","position":15},{"hierarchy":{"lvl1":"Custom Map Images with Cartopy"},"type":"lvl1","url":"/notebooks/custom-images-example","position":0},{"hierarchy":{"lvl1":"Custom Map Images with Cartopy"},"content":"Vapor has a built-in image renderer that can be used to draw land beneath your visualization. However, if you load the data using XArray or if the dataset lacks georeferencing information, the geographic extent of the image renderer will be incorrect. In this guide we will create a map image with custom bounds and custom Cartopy features that can be displayed with Vapor’s image renderer.\n\n","type":"content","url":"/notebooks/custom-images-example","position":1},{"hierarchy":{"lvl1":"Custom Map Images with Cartopy","lvl2":"Requirements"},"type":"lvl2","url":"/notebooks/custom-images-example#requirements","position":2},{"hierarchy":{"lvl1":"Custom Map Images with Cartopy","lvl2":"Requirements"},"content":"\n\nThis guide requires vapor and cartopy libraries. To access NASA satellite images, you will also need owslib: conda install -c conda-forge -c ncar-vapor vaporconda install conda-forge::cartopyconda install conda-forge::owslib\n\n# Data download:\nimport os\nimport requests\nimport zipfile\n\n# Plotting libraries:\nimport matplotlib.pyplot as plt\nimport cartopy.crs as ccrs\nimport cartopy.feature as cf\n\n# Data handling:\nimport xarray as xr\nimport numpy as np\n\n# Vapor:\nfrom vapor import renderer, dataset, session\n\nWe will also use vapor’s Katrina sample dataset:\n\n### This cell installs vapor's Katrina sample dataset ###\nurl = 'https://data.rda.ucar.edu/ds897.7/Katrina.zip'\nextract_to = './data'\nzip_name = \"Katrina.zip\"\ndata_file = './data/wrfout_d02_2005-08-29_02.nc'\n\n# Check if the data file already exists\nif not os.path.exists(data_file):\n    # Download zip\n    with requests.get(url, stream=True) as r:\n        r.raise_for_status()\n        with open(zip_name, 'wb') as f:\n            for chunk in r.iter_content(chunk_size=8192):\n                f.write(chunk)\n    # Extract the file\n    with zipfile.ZipFile(zip_name, 'r') as zip_ref:\n        zip_ref.extractall(extract_to)\n\n    # Clean up the zip file\n    os.remove(zip_name)\n\n    print(f\"Data downloaded and extracted to {data_file}\")\nelse:\n    print(f\"Data file already exists at {data_file}, skipping download and extraction.\")\n\n\n","type":"content","url":"/notebooks/custom-images-example#requirements","position":3},{"hierarchy":{"lvl1":"Custom Map Images with Cartopy","lvl2":"Select Parameters for our Image"},"type":"lvl2","url":"/notebooks/custom-images-example#select-parameters-for-our-image","position":4},{"hierarchy":{"lvl1":"Custom Map Images with Cartopy","lvl2":"Select Parameters for our Image"},"content":"\n\nSpecify where the new image file will be saved:\n\ntargetDir = \"\"\nfileName = \"Katrina_map_image\"\n\nSpecify the lon/lat bounds of your image. Make sure it is exactly the same as the geographic extent of your dataset:\n\n### If you know the extent of your dataset, you can set your bounds manually ###\n# west = -95.8826\n# north = 32.95732\n# east = -82.84012\n# south = 21.616137\n\n### Or you can extract this information from your dataset ###\nds = xr.open_dataset(\"data/wrfout_d02_2005-08-29_02.nc\")\nwest = np.min(ds[\"XLONG\"].values)\neast = np.max(ds[\"XLONG\"].values)\nsouth = np.min(ds[\"XLAT\"].values)\nnorth = np.max(ds[\"XLAT\"].values)\n\n\nChoose the size of your output figure. Note: If your specified lat/lon extents have a different aspect ratio than\nyour width and height, the geotiff will have either of its dimensions scaled to\nmatch the aspect ratio of the specified extents of the west/north/east/south\nvariables.\n\nwidth = 1920\nheight = 1080\ndpi = 42\n\nOptional: to include a satellite image, identify the url and layer of the image. The following cell selects a Blue Marble image from NASA. (You can try other layers, like the VIIRS city lights layer)\n\nurl = \"https://map1c.vis.earthdata.nasa.gov/wmts-geo/wmts.cgi\"\nlayer = \"BlueMarble_ShadedRelief\"\n# layer = 'VIIRS_CityLights_2012'\n\n","type":"content","url":"/notebooks/custom-images-example#select-parameters-for-our-image","position":5},{"hierarchy":{"lvl1":"Custom Map Images with Cartopy","lvl2":"Create a cartopy map"},"type":"lvl2","url":"/notebooks/custom-images-example#create-a-cartopy-map","position":6},{"hierarchy":{"lvl1":"Custom Map Images with Cartopy","lvl2":"Create a cartopy map"},"content":"\n\nSet up your figure and optionally add a satellite image\n\nfig = plt.figure(\n    figsize=(width/dpi, height/dpi), \n    tight_layout=True \n)\nax = fig.add_subplot(1, 1, 1, projection=ccrs.PlateCarree())\n\nax.set_extent(\n    [west, east, south, north], \n    crs=ccrs.PlateCarree()\n)\n\nax.add_wmts(url, layer) # Adds the satellite image we chose in the previous cell. Remove this line for native Cartopy maps\n\n","type":"content","url":"/notebooks/custom-images-example#create-a-cartopy-map","position":7},{"hierarchy":{"lvl1":"Custom Map Images with Cartopy","lvl2":"Add Cartopy Features"},"type":"lvl2","url":"/notebooks/custom-images-example#add-cartopy-features","position":8},{"hierarchy":{"lvl1":"Custom Map Images with Cartopy","lvl2":"Add Cartopy Features"},"content":"\n\nFor this example, we’ll add state borders, coastlines, and roads\n\n# Borders\nax.add_feature(\n    cf.STATES,\n    edgecolor='darkgray', \n    facecolor='none',\n    linewidth=3\n)\n\n# Coastlines\nax.add_feature(\n    cf.COASTLINE,\n    edgecolor='lightgray', \n    facecolor='none',\n    linewidth=3\n)\n\n# Roads\nax.add_feature(\n    cf.NaturalEarthFeature('cultural', 'roads_north_america', '10m'), \n    edgecolor='yellow', \n    facecolor='none'\n)\n\n","type":"content","url":"/notebooks/custom-images-example#add-cartopy-features","position":9},{"hierarchy":{"lvl1":"Custom Map Images with Cartopy","lvl2":"View and save image"},"type":"lvl2","url":"/notebooks/custom-images-example#view-and-save-image","position":10},{"hierarchy":{"lvl1":"Custom Map Images with Cartopy","lvl2":"View and save image"},"content":"\n\n# Save figure\ntiffFile = targetDir + fileName + \".tif\"\nfig.savefig( tiffFile,\n             bbox_inches='tight',\n             pad_inches=0\n)\n\nfig\n\n","type":"content","url":"/notebooks/custom-images-example#view-and-save-image","position":11},{"hierarchy":{"lvl1":"Custom Map Images with Cartopy","lvl2":"Example: loading the map as an image in Vapor"},"type":"lvl2","url":"/notebooks/custom-images-example#example-loading-the-map-as-an-image-in-vapor","position":12},{"hierarchy":{"lvl1":"Custom Map Images with Cartopy","lvl2":"Example: loading the map as an image in Vapor"},"content":"\n\nTo view our map in Vapor, create an image renderer and set its path to the file we just created. Important: our image does not contain georeferencing information, to be sure the set ‘IsGeoRef’ to false\n\nses = session.Session()\ndata = ses.OpenDataset(dataset.WRF, [\"data/wrfout_d02_2005-08-29_02.nc\"])\nimage = data.NewRenderer(renderer.ImageRenderer)\nimage.SetImagePath(\"./Katrina_map_image.tif\")\nimage.SetIsGeoRef(False)\n\n# Add visualization of the hurricane's clouds\nclouds = data.NewRenderer(renderer.VolumeRenderer) # Render clouds\nclouds.SetVariableName(\"QCLOUD\")\nclouds_tf = clouds.GetTransferFunction(\"QCLOUD\")\nclouds_tf.LoadBuiltinColormap(\"Sequential/BlackWhite\")\nclouds_tf.SetColorRGBList([(r, g, b) for r, g, b, _ in \n                           list(reversed(clouds_tf.GetMatPlotLibColormap().colors))])\nclouds_tf.SetOpacityControlPoints([[0,0],[0.00001,0.01], [0.0001, 0.1], [0.0010,0.9]])\nses.GetCamera().LookAt([-1190444, 1882360, 770176], [-420811, 2737271, 5699], [0.41853764, 0.35630071, 0.83538976])\nses.Show()","type":"content","url":"/notebooks/custom-images-example#example-loading-the-map-as-an-image-in-vapor","position":13},{"hierarchy":{"lvl1":"Opening Datasets"},"type":"lvl1","url":"/notebooks/dataset-example","position":0},{"hierarchy":{"lvl1":"Opening Datasets"},"content":"Vapor supports a variety of scientific data formats.\nThis notebook shows how to open a dataset and query its metadata.\n\nimport example_utils\nfrom vapor import session, renderer, dataset, camera\n\nprint(\"Supported dataset types:\", dataset.Dataset.GetDatasetTypes())\n\nses = session.Session()\ndata = example_utils.OpenExampleDataset(ses)\n\n# Examples of opening real data\n#\n# data = ses.OpenDataset(dataset.WRF, [\"data/wrf_out.0001\", \"data/wrf_out.0002\"])\n# data = ses.OpenDataset(dataset.VDC, [\"master.vdc\"])\n# data = ses.OpenDataset(dataset.MPAS, [\"x1.static.nc\", \"diag.2021-03-04_10.30.00.nc\"])\n\n","type":"content","url":"/notebooks/dataset-example","position":1},{"hierarchy":{"lvl1":"Opening Datasets","lvl2":"Dump the dataset metadata"},"type":"lvl2","url":"/notebooks/dataset-example#dump-the-dataset-metadata","position":2},{"hierarchy":{"lvl1":"Opening Datasets","lvl2":"Dump the dataset metadata"},"content":"\n\ndata\n\n","type":"content","url":"/notebooks/dataset-example#dump-the-dataset-metadata","position":3},{"hierarchy":{"lvl1":"Opening Datasets","lvl2":"Render the first 2D variable as a wireframe"},"type":"lvl2","url":"/notebooks/dataset-example#render-the-first-2d-variable-as-a-wireframe","position":4},{"hierarchy":{"lvl1":"Opening Datasets","lvl2":"Render the first 2D variable as a wireframe"},"content":"\n\nren = data.NewRenderer(renderer.WireFrameRenderer)\nren.SetVariableName(data.GetDataVarNames(2)[0]) # Set to first 2D data variable\n\nses.GetCamera().ViewAll()\nses.Show()","type":"content","url":"/notebooks/dataset-example#render-the-first-2d-variable-as-a-wireframe","position":5},{"hierarchy":{"lvl1":"Advecting Flow Paths"},"type":"lvl1","url":"/notebooks/flow-example","position":0},{"hierarchy":{"lvl1":"Advecting Flow Paths"},"content":"Vapor can advect and render flow paths through your data.\n\nimport example_utils\nfrom vapor import session, renderer, dataset, camera\n\nses = session.Session()\ndata = example_utils.OpenExampleDataset(ses)\n\n","type":"content","url":"/notebooks/flow-example","position":1},{"hierarchy":{"lvl1":"Advecting Flow Paths","lvl2":"Default advection"},"type":"lvl2","url":"/notebooks/flow-example#default-advection","position":2},{"hierarchy":{"lvl1":"Advecting Flow Paths","lvl2":"Default advection"},"content":"When you create a Flow renderer, the default advection will create a regularly dispersed grid of seed points and simulate a streamline advection in 2D or 3D, depending on the provided variables.\n\n# Use first 2 2D variables as our U,V for the flow advection\ndimension = 2\nU,V = data.GetDataVarNames(dimension)[0:2]\n\nren:renderer.FlowRenderer = data.NewRenderer(renderer.FlowRenderer)\nren.SetFieldVariableNames([U, V])\nses.GetCamera().ViewAll()\nses.Show()\n\n","type":"content","url":"/notebooks/flow-example#default-advection","position":3},{"hierarchy":{"lvl1":"Advecting Flow Paths","lvl2":"Rendering techniques"},"type":"lvl2","url":"/notebooks/flow-example#rendering-techniques","position":4},{"hierarchy":{"lvl1":"Advecting Flow Paths","lvl2":"Rendering techniques"},"content":"The rendering of the flow paths can be configured. A few examples are shown below.\nCall help(renderer.FlowRenderer) to see additional options.\n\nren.SetRenderType(ren.RenderType.RenderTypeStream)\nren.SetRenderRadiusScalar(3)\nren.SetRenderGeom3D(True)\nren.SetColorMapVariableName(U)\nses.Show()\n\nRather than rendering the flow lines, you can also render the sample points that are taken along the flow path individually.\n\nren.SetRenderType(ren.RenderType.RenderTypeSamples)\nses.Show()\n\nren.SetRenderGlyphType(ren.GlpyhType.GlpyhTypeArrow)\nren.SetRenderRadiusScalar(7)\nses.Show()\n\n# Reset the rendering style for the next section\nren.SetRenderRadiusScalar(3)\nren.SetRenderType(ren.RenderType.RenderTypeStream)\n\n","type":"content","url":"/notebooks/flow-example#rendering-techniques","position":5},{"hierarchy":{"lvl1":"Advecting Flow Paths","lvl2":"Seeding the advection"},"type":"lvl2","url":"/notebooks/flow-example#seeding-the-advection","position":6},{"hierarchy":{"lvl1":"Advecting Flow Paths","lvl2":"Seeding the advection"},"content":"The seeds from which the advected particles start can be configured in a variety of manners.\nCall help(renderer.FlowRenderer) to see additional options.\n\n","type":"content","url":"/notebooks/flow-example#seeding-the-advection","position":7},{"hierarchy":{"lvl1":"Advecting Flow Paths","lvl3":"Uniform Distribution","lvl2":"Seeding the advection"},"type":"lvl3","url":"/notebooks/flow-example#uniform-distribution","position":8},{"hierarchy":{"lvl1":"Advecting Flow Paths","lvl3":"Uniform Distribution","lvl2":"Seeding the advection"},"content":"This is the default. It creates a uniformly distributed grid of seed points over the area/volume of the advected region.\n\nren.SetSeedGenMode(ren.FlowSeedMode.UNIFORM)\nrake = ren.GetRakeRegion()\ndefaultRakeExtents = rake.GetExtents()\nrake.SetExtents((20, 20), (40, 40))\nprint(f\"Seeding a {ren.GetGridNumOfSeeds()} grid over {rake.GetExtents()}\")\nses.Show()\nrake.SetExtents(*defaultRakeExtents)\n\n","type":"content","url":"/notebooks/flow-example#uniform-distribution","position":9},{"hierarchy":{"lvl1":"Advecting Flow Paths","lvl3":"Random Distribution","lvl2":"Seeding the advection"},"type":"lvl3","url":"/notebooks/flow-example#random-distribution","position":10},{"hierarchy":{"lvl1":"Advecting Flow Paths","lvl3":"Random Distribution","lvl2":"Seeding the advection"},"content":"\n\nren.SetSeedGenMode(ren.FlowSeedMode.RANDOM)\nprint(f\"Seeding {ren.GetRandomNumOfSeeds()} random points over {rake.GetExtents()}\")\nses.Show()\n\n","type":"content","url":"/notebooks/flow-example#random-distribution","position":11},{"hierarchy":{"lvl1":"Advecting Flow Paths","lvl3":"Biased Distribution","lvl2":"Seeding the advection"},"type":"lvl3","url":"/notebooks/flow-example#biased-distribution","position":12},{"hierarchy":{"lvl1":"Advecting Flow Paths","lvl3":"Biased Distribution","lvl2":"Seeding the advection"},"content":"This generates a random list of seed points however they are biased by a given variable.\nThe number of seed points can be higher or lower based on the value of the RakeBiasVariable.\nYou can set the RakeBiasStrength to a negative value to invert the bias.\n\nren.SetSeedGenMode(ren.FlowSeedMode.RANDOM_BIAS)\nren.SetRakeBiasVariable(V)\nren.SetRakeBiasStrength(1)\nprint(f\"Seeding {ren.GetRandomNumOfSeeds()} random points biased by {ren.GetRakeBiasVariable()} over {rake.GetExtents()}\")\nses.Show()\n\n","type":"content","url":"/notebooks/flow-example#biased-distribution","position":13},{"hierarchy":{"lvl1":"Advecting Flow Paths","lvl3":"Manual List","lvl2":"Seeding the advection"},"type":"lvl3","url":"/notebooks/flow-example#manual-list","position":14},{"hierarchy":{"lvl1":"Advecting Flow Paths","lvl3":"Manual List","lvl2":"Seeding the advection"},"content":"You can pass in a manually created list of seeds using a basic text file format.\nThe code below generates an example seed file and passes it to Vapor.\nThe full documentation for the seed file format can be found on Vapor’s website.\n\nwith open(\"flow_seeds.txt\", \"w\") as f:\n    print(\"# X, Y, Z, T (optional)\", file=f)\n    print(\"10, 10, 0\", file=f)\n    print(\"20, 20, 0\", file=f)\n\nren.SetSeedGenMode(ren.FlowSeedMode.LIST)\nren.SetSeedInputFilename(\"flow_seeds.txt\")\nses.Show()","type":"content","url":"/notebooks/flow-example#manual-list","position":15},{"hierarchy":{"lvl1":"How to Cite This Cookbook"},"type":"lvl1","url":"/notebooks/how-to-cite","position":0},{"hierarchy":{"lvl1":"How to Cite This Cookbook"},"content":"The material in Project Pythia’s VAPOR python cookbook is licensed for free and open consumption and reuse. All code is served under \n\nApache 2.0, while all non-code content is licensed under \n\nCreative Commons BY 4.0 (CC BY 4.0). Effectively, this means you are free to share and adapt this material so long as you give appropriate credit to the Cookbook authors and the Project Pythia community.\n\nThe source code for the book is \n\nreleased on GitHub and archived on Zenodo. This DOI will always resolve to the latest release of the book source:\n\n","type":"content","url":"/notebooks/how-to-cite","position":1},{"hierarchy":{"lvl1":"Keyframing with Vapor"},"type":"lvl1","url":"/notebooks/keyframing-example","position":0},{"hierarchy":{"lvl1":"Keyframing with Vapor"},"content":"In this notebook, we will create an animation where our camera moves to view our visualization from different angles. We will achieve this using an animation technique called keyframing. This technique involves selecting several key scenes, known as keyframes, and then having the computer generate the intermediate frames between these keyframes. This process creates a smooth transition from one keyframe to the next, resulting in a fluid animation.\n\n","type":"content","url":"/notebooks/keyframing-example","position":1},{"hierarchy":{"lvl1":"Keyframing with Vapor","lvl2":"Setup and data download"},"type":"lvl2","url":"/notebooks/keyframing-example#setup-and-data-download","position":2},{"hierarchy":{"lvl1":"Keyframing with Vapor","lvl2":"Setup and data download"},"content":"\n\nfrom vapor import session, dataset, renderer\nfrom vapor.animation import Animation\n\nThe following cell will download the data from NCAR’s \n\nResearch Data Archives.\n\nimport os\nimport requests\nimport zipfile\nurl = 'https://data.rda.ucar.edu/ds897.7/Katrina.zip'\nextract_to = './data'\nzip_name = \"Katrina.zip\"\ndata_file = './data/wrfout_d02_2005-08-29_02.nc'\n\n# Check if the data file already exists\nif not os.path.exists(data_file):\n    # Download zip\n    with requests.get(url, stream=True) as r:\n        r.raise_for_status()\n        with open(zip_name, 'wb') as f:\n            for chunk in r.iter_content(chunk_size=8192):\n                f.write(chunk)\n    # Extract the file\n    with zipfile.ZipFile(zip_name, 'r') as zip_ref:\n        zip_ref.extractall(extract_to)\n\n    # Clean up the zip file\n    os.remove(zip_name)\n\n    print(f\"Data downloaded and extracted to {data_file}\")\nelse:\n    print(f\"Data file already exists at {data_file}, skipping download and extraction.\")\n\n\n","type":"content","url":"/notebooks/keyframing-example#setup-and-data-download","position":3},{"hierarchy":{"lvl1":"Keyframing with Vapor","lvl2":"Create keyframes"},"type":"lvl2","url":"/notebooks/keyframing-example#create-keyframes","position":4},{"hierarchy":{"lvl1":"Keyframing with Vapor","lvl2":"Create keyframes"},"content":"\n\nTo begin creating our animation, we first create our keyframes. Each keyframe corresponds to a specific moment in our animation, defined by the camera’s position and orientation. We can create these keyframes using either Python or the Vapor application, and save them as session files. For the purpose of this notebook, we’ll input our camera information directly in Python, but in practice, it’s easier to fine-tune the camera settings within the application.\n\nFirst we’ll create our static visualization. A detailed guide on how this is created can be found in the quickstart notebook\n\nses = session.Session()\ndata = ses.OpenDataset(dataset.WRF, [\"data/wrfout_d02_2005-08-29_02.nc\"])\nland = data.NewRenderer(renderer.ImageRenderer) # Render land image\nland.GetTransform().SetTranslations([0,0,100])\nland.SetHeightVariableName(\"HGT\")\nwind = data.NewRenderer(renderer.TwoDDataRenderer) # Render U10\nwind.SetVariableName(\"U10\")\nclouds = data.NewRenderer(renderer.VolumeRenderer) # Render clouds\nclouds.SetVariableName(\"QCLOUD\")\nclouds_tf = clouds.GetTransferFunction(\"QCLOUD\")\nclouds_tf.LoadBuiltinColormap(\"Sequential/BlackWhite\")\nclouds_tf.SetColorRGBList([(r, g, b) for r, g, b, _ in \n                           list(reversed(clouds_tf.GetMatPlotLibColormap().colors))])\nclouds_tf.SetOpacityControlPoints([[0,0],[0.00001,0.01], [0.0001, 0.1], [0.0010,0.9]])\n\nNow, we’ll define the camera settings for each of our keyframes. These numbers are tricky to get right in Python, so it is recommended that they are selected within the application.\n\n# The camera position of each keyframe\npositions = [\n    [-1190444.44426004, 1882360.85954653, 770176.40842364], # Keyframe 1\n    [-1172384.15238047, 2813172.26639064, 355291.41877028], # Keyframe 2\n    [-968784.32993129, 3056725.58106798, -34317.16158186], # ...\n    [-733144.08018801, 2929790.21696698, -32984.22588893],\n    [-691781.20449513, 2442083.68616993, -47289.68751812]\n]\n\n# The camera target for each keyframe\ntargets = [\n    [-420811.28125, 2737271.75, 5699.78515597], # Keyframe 1\n    [-420811.28125, 2737271.75, 15699.78515597], # ...\n    [-420811.28125, 2737271.75, 15699.78515597],\n    [-420811.28125, 2737271.75, 15699.78515597],\n    [-420811.28125, 2737271.75, 15699.78515597]\n]\n\n# The up vector for each keyframe\nups = [\n    [0.41853764, 0.35630071, 0.83538976],\n    [ 0.39861183, -0.08972356, 0.91272027],\n    [-0.08058301, 0.02890014, 0.99632884],\n    [-0.080583, 0.02890014, 0.99632884],\n    [-0.0964622, -0.0632074, 0.99332767]\n]\n\nNow, we will save each of these camera settings to a session file to represent our keyframes.\n\nos.makedirs(\"keyframes\", exist_ok=True) # Make directory for keyframes if it doesn't exist\nfor i, position, target, up in zip(range(1, len(positions)+1), positions, targets, ups):\n    ses.GetCamera().LookAt(position, target, up)\n    ses.Save(f\"./keyframes/keyframe{i}.vs3\")\n\n","type":"content","url":"/notebooks/keyframing-example#create-keyframes","position":5},{"hierarchy":{"lvl1":"Keyframing with Vapor","lvl2":"Generate Animation"},"type":"lvl2","url":"/notebooks/keyframing-example#generate-animation","position":6},{"hierarchy":{"lvl1":"Keyframing with Vapor","lvl2":"Generate Animation"},"content":"\n\nSpecify the paths to your session files (keyframes) and the number of interpolation steps between each keyframe.\n\nsessions = [\n    \"keyframes/keyframe1.vs3\",\n    \"keyframes/keyframe2.vs3\",\n    \"keyframes/keyframe3.vs3\",\n    \"keyframes/keyframe4.vs3\",\n    \"keyframes/keyframe5.vs3\",\n]\nsteps = [40,30,30,30]\n\n","type":"content","url":"/notebooks/keyframing-example#generate-animation","position":7},{"hierarchy":{"lvl1":"Keyframing with Vapor","lvl2":"Generate and Display Animation"},"type":"lvl2","url":"/notebooks/keyframing-example#generate-and-display-animation","position":8},{"hierarchy":{"lvl1":"Keyframing with Vapor","lvl2":"Generate and Display Animation"},"content":"\n\nNow, we will create the animation using the defined keyframes and steps, then display it. Vapor’s utils.keyframing.animate_camera_keyframes utility function generates an animation using keyframing from a list of session paths and a corresponding list of integers that describe the number of frames between each keyframe. It creates and returns an animation that can be displayed.\n\nfrom vapor.utils import keyframing\nanim = keyframing.animate_camera_keyframes(sessions, steps)\nanim.Show()","type":"content","url":"/notebooks/keyframing-example#generate-and-display-animation","position":9},{"hierarchy":{"lvl1":"Rendering Numpy data with Vapor"},"type":"lvl1","url":"/notebooks/numpy-example","position":0},{"hierarchy":{"lvl1":"Rendering Numpy data with Vapor"},"content":"Vapor supports rendering 2D and 3D numpy data.\nIn order to pass Numpy data to Vapor, create a data set of the type vapor.dataset.PYTHON\nThis can also be done with the convenience function Session.CreatePythonDataset().\nYou can add numpy arrays as variables to that dataset by using Dataset.AddNumpyData.\n\nThese variables can then be rendered normally using any of Vapor’s renderers.\n\nimport example_utils\nfrom vapor import session, renderer, dataset, camera\nimport numpy as np\n\nses = session.Session()\ndata = ses.CreatePythonDataset()\n\n\n# Create a 2D numpy array and add it to vapor's dataset\n\nnp_array = np.arange(64**2).reshape((64,64))\ndata.AddNumpyData(\"variable_name\", np_array)\n\nprint(np_array)\n\n\n# Create a renderer for the data\n\nren = data.NewRenderer(renderer.WireFrameRenderer)\nren.SetVariableName(\"variable_name\")\n\n\n# Show the rendering\n\nses.GetCamera().ViewAll()\nses.Show()","type":"content","url":"/notebooks/numpy-example","position":1},{"hierarchy":{"lvl1":"Quickstart"},"type":"lvl1","url":"/notebooks/quickstart","position":0},{"hierarchy":{"lvl1":"Quickstart"},"content":"This guide aims to help new users get started with VAPOR’s Python API, showcasing a typical workflow using an example dataset. We will cover some of the key features of the VAPOR API, and explain some of the essential concepts specific to 3D visualization in VAPOR.\n\nCreating visualization in VAPOR can be divided into 4 steps, which we will go through in this notebook.\n\nImport Data\n\nSelect and Apply Renderers\n\nAnnotate\n\nExport\n\n","type":"content","url":"/notebooks/quickstart","position":1},{"hierarchy":{"lvl1":"Quickstart","lvl2":"Setup"},"type":"lvl2","url":"/notebooks/quickstart#setup","position":2},{"hierarchy":{"lvl1":"Quickstart","lvl2":"Setup"},"content":"\n\n","type":"content","url":"/notebooks/quickstart#setup","position":3},{"hierarchy":{"lvl1":"Quickstart","lvl3":"Import VAPOR","lvl2":"Setup"},"type":"lvl3","url":"/notebooks/quickstart#import-vapor","position":4},{"hierarchy":{"lvl1":"Quickstart","lvl3":"Import VAPOR","lvl2":"Setup"},"content":"\n\nTo begin, we will import the vapor modules we will be using.\n\nfrom vapor import session, renderer, dataset\nfrom vapor.animation import Animation\nfrom vapor.dataset import Dataset\n\n","type":"content","url":"/notebooks/quickstart#import-vapor","position":5},{"hierarchy":{"lvl1":"Quickstart","lvl3":"Initialize Session","lvl2":"Setup"},"type":"lvl3","url":"/notebooks/quickstart#initialize-session","position":6},{"hierarchy":{"lvl1":"Quickstart","lvl3":"Initialize Session","lvl2":"Setup"},"content":"\n\n3D visualizations in VAPOR are managed using \n\nsessions. A session captures all the necessary information to recreate a visualization, including dataset details, rendering settings, and camera positions. In this notebook, we’ll create a new visualization within a session. Later, we can save this session to a file, allowing it to be opened in VAPOR’s GUI application or another Python script.\n\nses = session.Session()\n\n","type":"content","url":"/notebooks/quickstart#initialize-session","position":7},{"hierarchy":{"lvl1":"Quickstart","lvl3":"Load Data","lvl2":"Setup"},"type":"lvl3","url":"/notebooks/quickstart#load-data","position":8},{"hierarchy":{"lvl1":"Quickstart","lvl3":"Load Data","lvl2":"Setup"},"content":"\n\nOnce we’ve created our session, we’ll want to load our dataset. Vapor supports a number of scientific data formats, which can be viewed with Dataset.GetDatasetTypes()\n\nDataset.GetDatasetTypes()\n\nIn this example, we will be using data from the WRF model of Hurricane Katrina from 2005. The following cell will download the data from NCAR’s \n\nResearch Data Archives.\n\nimport os\nimport requests\nimport zipfile\nurl = 'https://data.rda.ucar.edu/ds897.7/Katrina.zip'\nextract_to = './data'\nzip_name = \"Katrina.zip\"\ndata_file = './data/wrfout_d02_2005-08-29_02.nc'\n\n# Check if the data file already exists\nif not os.path.exists(data_file):\n    # Download zip\n    with requests.get(url, stream=True) as r:\n        r.raise_for_status()\n        with open(zip_name, 'wb') as f:\n            for chunk in r.iter_content(chunk_size=8192):\n                f.write(chunk)\n    # Extract the file\n    with zipfile.ZipFile(zip_name, 'r') as zip_ref:\n        zip_ref.extractall(extract_to)\n\n    # Clean up the zip file\n    os.remove(zip_name)\n\n    print(f\"Data downloaded and extracted to {data_file}\")\nelse:\n    print(f\"Data file already exists at {data_file}, skipping download and extraction.\")\n\n\nTo load the dataset into our session, we use ses.OpenDataset(), which requires two parameters. The first parameter specifies the file format, in this case, dataset.WRF. The second parameter is a list of file paths. Since we only have one file, we provide a list containing just that file.\n\ndata = ses.OpenDataset(dataset.WRF, [\"data/wrfout_d02_2005-08-29_02.nc\"])\n\nThe dataset contains a number of atmospheric variables that describe attributes of the storm, such as pressure, wind, clouds, and rain. For this example, we will use three variables: U10, a 2 dimensional variable that describes the 10 meter zonal wind speed, QCLOUD, a 3 dimensional variable to visualize the cloud formation of the storm, and HGT, a 2D variable to visualize the topography of the land. Below we will display the metadata for these variables.\n\nprint(\"Data Variables:\")\nvars = [\"U10\", \"QCLOUD\", \"HGT\"]\nfor var in data.GetDataVarNames():\n    if var in vars:\n        print(f\" {var}\")\n        print(f\"    Time Varying: False\")\n        print(f\"    Dimensionality:\", data.GetVarGeometryDim(var))\n        print(f\"    Coordinates:\", data.GetVarCoordVars(var, True))\n        print(\"     Data Range:\", data.GetDataRange(var))\n\n","type":"content","url":"/notebooks/quickstart#load-data","position":9},{"hierarchy":{"lvl1":"Quickstart","lvl2":"Apply Renderers"},"type":"lvl2","url":"/notebooks/quickstart#apply-renderers","position":10},{"hierarchy":{"lvl1":"Quickstart","lvl2":"Apply Renderers"},"content":"\n\nNow that we’ve loaded our data, it’s time to start the visualization process. Visualization in Vapor is based around renderers, which display data with customizable colors and opacities. Tutorials for using renderers in Vapor’s GUI can be found \n\nhere, and each one works similarly in Python. In this example, we’ll create a 2D data renderer and a volume renderer.\n\n","type":"content","url":"/notebooks/quickstart#apply-renderers","position":11},{"hierarchy":{"lvl1":"Quickstart","lvl3":"Image Renderer","lvl2":"Apply Renderers"},"type":"lvl3","url":"/notebooks/quickstart#image-renderer","position":12},{"hierarchy":{"lvl1":"Quickstart","lvl3":"Image Renderer","lvl2":"Apply Renderers"},"content":"\n\nWe will start by creating an image renderer to display the topography of the land. This dataset is georeferenced, so we can use Vapor’s builtin image simply by calling data.NewRenderer(renderer.ImageRenderer). Additionally, our dataset stores the elevation at each gridpoint in HGT, and by linking this to our image renderer with land.SetHeightVariableName(\"HGT\") we can render the topography in 3D.\n\nland = data.NewRenderer(renderer.ImageRenderer)\nland.SetHeightVariableName(\"HGT\")\n\nNow, we can call ses.Show() to display our visualization!\n\nses.Show()\n\n","type":"content","url":"/notebooks/quickstart#image-renderer","position":13},{"hierarchy":{"lvl1":"Quickstart","lvl3":"2D Data Renderer","lvl2":"Apply Renderers"},"type":"lvl3","url":"/notebooks/quickstart#id-2d-data-renderer","position":14},{"hierarchy":{"lvl1":"Quickstart","lvl3":"2D Data Renderer","lvl2":"Apply Renderers"},"content":"\n\nThe 2D Data Renderer displays a 2D data variable along the plane described by the dataset. We will use it to display our U10 variable, which represents the east/west wind speed at a 10-meter elevation. First, we select the renderer type by calling NewRenderer() on the dataset. Next, we specify the variable to visualize by calling SetVariableName() on the renderer.\n\nwind = data.NewRenderer(renderer.TwoDDataRenderer)\nwind.SetVariableName(\"U10\")\n\nIf our image and 2D data renderers are too close to each other, it can lead to unexpected results. To prevent this, we’ll lift our image renderer slightly off the ground. We can achieve this by using GetTransform() and SetTranslations() as follows.\n\nland_transform = land.GetTransform()\nland_transform.SetTranslations([0, 0, 100])\n\nses.Show()\n\n","type":"content","url":"/notebooks/quickstart#id-2d-data-renderer","position":15},{"hierarchy":{"lvl1":"Quickstart","lvl3":"Volume Renderer","lvl2":"Apply Renderers"},"type":"lvl3","url":"/notebooks/quickstart#volume-renderer","position":16},{"hierarchy":{"lvl1":"Quickstart","lvl3":"Volume Renderer","lvl2":"Apply Renderers"},"content":"\n\nNext, let’s create a visualization for a three dimensional variable. The QCLOUD variable measures the cloud density at every gridpoint. We can use a volume renderer to display where the clouds are thickest. As before, we first select our renderer and variable name.\n\nclouds = data.NewRenderer(renderer.VolumeRenderer)\nclouds.SetVariableName(\"QCLOUD\")\n\nWe can adjust the appearance of our renderer by modifying its \n\ntransfer function, which describes the color and opacity of the data in the visualization. The \n\ntransfer function notebook provides more examples on how to customize a transfer function.\n\nFirst, we will set the colors to a white-gray-black scale. Then, we will adjust the opacities of the renderer. We want areas with almost no clouds to be completely transparent, while areas with more clouds should be more opaque. We use SetOpacityControlPoints with a list of [value, opacity] pairs to specify the opacity of data points with a certain value.\n\nclouds_tf = clouds.GetTransferFunction(\"QCLOUD\")\n# Load built in black to white colormap\nclouds_tf.LoadBuiltinColormap(\"Sequential/BlackWhite\")\n# Access and reverse RGB list from current color map\nnew_colors = [(r, g, b) for r, g, b, _ in list(reversed(clouds_tf.GetMatPlotLibColormap().colors))]\n# Assign new RGB colors to transfer function\nclouds_tf.SetColorRGBList(new_colors)\n# Change opacities\nclouds_tf.SetOpacityControlPoints([[0,0],[0.00001,0.01], [0.0001, 0.1], [0.0010,0.9]])\n\nTo visualize the 3D structure of the clouds effectively, we need to set the camera at an appropriate angle. The \n\ncamera module in VAPOR offers several functions for controlling the camera’s position and orientation. Among these, the LookAt() function is the most robust and versatile. It takes two lists, each containing three elements representing a point in 3D space with (X, Y, Z) coordinates. The first list specifies the camera’s position, while the second list defines the point the camera is targeting.\n\nses.GetCamera().LookAt(\n    [-757400, 2189800, 761600], # Position\n    [-420800, 2737200, 15700]   # Target\n    )\nses.Show()\n\n","type":"content","url":"/notebooks/quickstart#volume-renderer","position":17},{"hierarchy":{"lvl1":"Quickstart","lvl2":"Add Annotations"},"type":"lvl2","url":"/notebooks/quickstart#add-annotations","position":18},{"hierarchy":{"lvl1":"Quickstart","lvl2":"Add Annotations"},"content":"\n\nWe can finalize our visualization with some \n\nannotations. For a more in depth tutorial on annotations, visit our \n\nannotation cookbook. Here, we’ll add a colorbar for our wind variable and axis arrows to help with orientation.\n\ncolorbar = wind.GetColorbarAnnotation()\ncolorbar.SetEnabled(True)\ncolorbar.SetCornerPosition((1,1))\n\nscene = ses.GetSceneAnnotations()\nscene.SetAxisArrowEnabled(True)\n\nses.Show()\n\nWe can also generate an interactive visual using Vapor’s jupyter widget. This allows you to move the camera around as if you were using the Vapor application.Note: This widget requires an active kernel to operate. To try it out, run this notebook on your local machine.\n\nfrom vapor import widget\nviz = widget.VaporVisualizerWidget(ses)\nviz\n\n","type":"content","url":"/notebooks/quickstart#add-annotations","position":19},{"hierarchy":{"lvl1":"Quickstart","lvl2":"Export"},"type":"lvl2","url":"/notebooks/quickstart#export","position":20},{"hierarchy":{"lvl1":"Quickstart","lvl2":"Export"},"content":"\n\nNow that we’ve created our visualization, we’ll want to save and export it. We can save visualization as a png, jpg, or tif using ses.Render()\n\nses.Render(\"Katrina.tif\")\n\nWe can also use ses.Save() to save our session to a file. We can load this file in a different python script or in the Vapor GUI.\n\nses.Save(\"Katrina.vs3\")\n\nTo access this session in a different Python script, we can use a line like this:\n\nses = session.Session()\nses.Load(\"Katrina.vs3\")","type":"content","url":"/notebooks/quickstart#export","position":21},{"hierarchy":{"lvl1":"Transfer Functions"},"type":"lvl1","url":"/notebooks/transfer-function-example","position":0},{"hierarchy":{"lvl1":"Transfer Functions"},"content":"You can change a visualization’s appearance by accessing and modifying its transfer function.\n\nimport example_utils\nfrom vapor import session, renderer, dataset, camera, transferfunction\nfrom vapor.utils import histogram\n\nses = session.Session()\ndata = example_utils.OpenExampleDataset(ses)\n\nren = data.NewRenderer(renderer.VolumeRenderer)\nses.GetCamera().LookAt((32, 120, 120), (32, 32, 32))\nses.Show()\n\n","type":"content","url":"/notebooks/transfer-function-example","position":1},{"hierarchy":{"lvl1":"Transfer Functions","lvl2":"Changing Opacities"},"type":"lvl2","url":"/notebooks/transfer-function-example#changing-opacities","position":2},{"hierarchy":{"lvl1":"Transfer Functions","lvl2":"Changing Opacities"},"content":"\n\nVapor’s transferFunctionWidget allows you to adjust the opacity points of a renderer as you would within Vapor’s GUI.\n\nfrom vapor.utils import histogram\nhistogram.transferFunctionWidget(ses, ren)\n\nIf you do not have access to the widget, we provide static options for changing the opacities as well.\nWe created a volume rendering however it is fully opaque.\nWe can use a transfer function to adjust the visible portions.\nBefore we adjust the opacity map of the TF, we get a histogram to help us determine what we want to hide.\n\nhistogram.ShowMatPlotLibHistogram(ses, ren)\n\nUsually we want to hide the most common value so below we construct an opacity map that accomplishes this.\n\n# List of x,y pairs where x is the data value and y is the opacity for that data value\nopacities = [(-0.3, 1), (-0.1, 0), (0.1, 0), (0.3, 1)]\n\nWe can get the matplotlib histogram plot and add our opacity map to it to compare.\n\nplt = histogram.GetMatPlotLibHistogram(ses, ren)\nplt.plot(*zip(*opacities))\nplt.show()\n\nNow we apply the map to the transfer function\n\n# Renderers can have multiple transfer functions.\n# GetPrimaryTransferFunction returns the one that is usually the most useful.\n# You can use `tf.GetTransferFunction(var_name)` to get other transfer functions.\ntf = ren.GetPrimaryTransferFunction()\ntf.SetOpacityControlPoints(opacities)\nses.Show()\n\nYou can adjust the colormap in a similar fashion. Use help(tf) for more information.\nVapor includes a list of built-in colormaps and these can be applied with tf.LoadBuiltinColormap(name)","type":"content","url":"/notebooks/transfer-function-example#changing-opacities","position":3},{"hierarchy":{"lvl1":"Transfer Functions","lvl2":"Builtin Colormaps"},"type":"lvl2","url":"/notebooks/transfer-function-example#builtin-colormaps","position":4},{"hierarchy":{"lvl1":"Transfer Functions","lvl2":"Builtin Colormaps"},"content":"\n\ntf.LoadBuiltinColormap(\"Sequential/BlackBodyExtended\")\nses.Show()\n\n","type":"content","url":"/notebooks/transfer-function-example#builtin-colormaps","position":5},{"hierarchy":{"lvl1":"Transfer Functions","lvl2":"List of All Builtin Colormaps"},"type":"lvl2","url":"/notebooks/transfer-function-example#list-of-all-builtin-colormaps","position":6},{"hierarchy":{"lvl1":"Transfer Functions","lvl2":"List of All Builtin Colormaps"},"content":"\n\n\nses.DeleteRenderer(ren)\nren = data.NewRenderer(renderer.TwoDDataRenderer)\ntf = ren.GetPrimaryTransferFunction()\n\nfor cmap in transferfunction.TransferFunction.ListBuiltinColormaps():\n    tf.LoadBuiltinColormap(cmap)\n\n    print(cmap)\n    tf.ShowMatPlotLibColorbar()","type":"content","url":"/notebooks/transfer-function-example#list-of-all-builtin-colormaps","position":7},{"hierarchy":{"lvl1":"Visualizer Widgets"},"type":"lvl1","url":"/notebooks/visualizer-widget-example","position":0},{"hierarchy":{"lvl1":"Visualizer Widgets"},"content":"Visualizer widgets allow you to interactively explore a session as you would in a Vapor GUI visualizer.\nThis notebook shows how to use visualizer widgets and how to add additional dynamic parameter inputs.\n\nNote: Widgets require an active kernel to operate. To try it out, run this notebook on your local machine.\n\nimport example_utils\nfrom vapor import session, renderer, dataset, camera, widget\nimport ipywidgets as widgets\n\nses = session.Session()\ndata = example_utils.OpenExampleDataset(ses)\n\n","type":"content","url":"/notebooks/visualizer-widget-example","position":1},{"hierarchy":{"lvl1":"Visualizer Widgets","lvl2":"Render an Iso Surface"},"type":"lvl2","url":"/notebooks/visualizer-widget-example#render-an-iso-surface","position":2},{"hierarchy":{"lvl1":"Visualizer Widgets","lvl2":"Render an Iso Surface"},"content":"\n\nren = data.NewRenderer(renderer.VolumeIsoRenderer)\nren.SetVariableName(data.GetDataVarNames(3)[0]) # Set to first 2D data variable\nren.SetIsoValues([ren.GetIsoValues()[0]+0.1])\n\nses.GetCamera().ViewAll()\nses.Show()\n\n","type":"content","url":"/notebooks/visualizer-widget-example#render-an-iso-surface","position":3},{"hierarchy":{"lvl1":"Visualizer Widgets","lvl2":"Create a visualizer to explore the scene"},"type":"lvl2","url":"/notebooks/visualizer-widget-example#create-a-visualizer-to-explore-the-scene","position":4},{"hierarchy":{"lvl1":"Visualizer Widgets","lvl2":"Create a visualizer to explore the scene"},"content":"Try dragging the image to rotate the view.\nHover over the visualizer to see the full controls.\n\nviz = widget.VaporVisualizerWidget(ses)\nviz\n\n","type":"content","url":"/notebooks/visualizer-widget-example#create-a-visualizer-to-explore-the-scene","position":5},{"hierarchy":{"lvl1":"Visualizer Widgets","lvl2":"Add an interactive iso value slider using ipywidgets"},"type":"lvl2","url":"/notebooks/visualizer-widget-example#add-an-interactive-iso-value-slider-using-ipywidgets","position":6},{"hierarchy":{"lvl1":"Visualizer Widgets","lvl2":"Add an interactive iso value slider using ipywidgets"},"content":"\n\ntf = ren.GetPrimaryTransferFunction()\ndataRange = tf.GetMinMaxMapValue()\n\ndef sliderChanged(change):\n    ren.SetIsoValues([change.new])\n    viz.Render(fast=True)\n\nslider = widgets.FloatSlider(value=ren.GetIsoValues()[0], min=dataRange[0], max=dataRange[1], step=(dataRange[1]-dataRange[0])/100)\nslider.observe(sliderChanged, names='value')\n\nwidgets.VBox([\n    viz,\n    widgets.HBox([widgets.Label(\"Iso value:\"), slider])\n])","type":"content","url":"/notebooks/visualizer-widget-example#add-an-interactive-iso-value-slider-using-ipywidgets","position":7},{"hierarchy":{"lvl1":"Generic Workflow"},"type":"lvl1","url":"/notebooks/workflow-example","position":0},{"hierarchy":{"lvl1":"Generic Workflow"},"content":"This shows an example workflow with vapor.\nWe begin by creating a session and opening a dataset.\nYou can have multiple sessions open at the same time.\n\nimport example_utils\nfrom vapor import session, renderer, dataset, camera\n\nses = session.Session()\ndata = example_utils.OpenExampleDataset(ses)\n\n","type":"content","url":"/notebooks/workflow-example","position":1},{"hierarchy":{"lvl1":"Generic Workflow","lvl2":"Dump the dataset metadata"},"type":"lvl2","url":"/notebooks/workflow-example#dump-the-dataset-metadata","position":2},{"hierarchy":{"lvl1":"Generic Workflow","lvl2":"Dump the dataset metadata"},"content":"\n\nprint(\"Time Coordinate Variable Name:\", data.GetTimeCoordVarName())\nprint(\"Coordinate Variable Names:\", data.GetCoordVarNames())\n\nprint(\"Dimensions:\")\nfor dim in data.GetDimensionNames():\n    print(f\"  {dim}:\", data.GetDimensionLength(dim, 0))\n\nprint(\"Data Variables:\")\nfor var in data.GetDataVarNames():\n    print(f\"  {var}\")\n    print(f\"    Time Varying:\", bool(data.IsTimeVarying(var)))\n    print(f\"    Dimensionality:\", data.GetVarGeometryDim(var))\n    print(f\"    Coordinates:\", data.GetVarCoordVars(var, True))\n    print(\"     Data Range:\", data.GetDataRange(var))\n\n","type":"content","url":"/notebooks/workflow-example#dump-the-dataset-metadata","position":3},{"hierarchy":{"lvl1":"Generic Workflow","lvl2":"Render the first 2D variable as a pseudocolor"},"type":"lvl2","url":"/notebooks/workflow-example#render-the-first-2d-variable-as-a-pseudocolor","position":4},{"hierarchy":{"lvl1":"Generic Workflow","lvl2":"Render the first 2D variable as a pseudocolor"},"content":"\n\nfirst_2d_var = data.GetDataVarNames(2)[0]\nprint(f\"Rendering 2D variable {first_2d_var}\")\n\nren = data.NewRenderer(renderer.TwoDDataRenderer)\nren.SetVariableName(first_2d_var)\nren.GetPrimaryTransferFunction().SetMinMapValue(-1)\nren.GetPrimaryTransferFunction().SetMaxMapValue(1)\n\nses.GetCamera().ViewAll()\nses.Show()\n\nses.DeleteRenderer(ren)\n\n","type":"content","url":"/notebooks/workflow-example#render-the-first-2d-variable-as-a-pseudocolor","position":5},{"hierarchy":{"lvl1":"Generic Workflow","lvl2":"Render U10 and V10 as barbs over a map"},"type":"lvl2","url":"/notebooks/workflow-example#render-u10-and-v10-as-barbs-over-a-map","position":6},{"hierarchy":{"lvl1":"Generic Workflow","lvl2":"Render U10 and V10 as barbs over a map"},"content":"\n\n# If your dataset is geo-referenced, this will automatically render a geographically correct map.\n# map_ren = data.NewRenderer(renderer.ImageRenderer)\n\nbarbs = data.NewRenderer(renderer.BarbRenderer)\nbarbs.SetDimensions(2)\nbarbs.SetFieldVariableNames(['U10', 'V10'])\nbarbs.SetLineThickness(2)\n\nses.Show()\nses.DeleteRenderer(barbs)\n\n","type":"content","url":"/notebooks/workflow-example#render-u10-and-v10-as-barbs-over-a-map","position":7},{"hierarchy":{"lvl1":"Generic Workflow","lvl2":"Simulate and render a flow advection"},"type":"lvl2","url":"/notebooks/workflow-example#simulate-and-render-a-flow-advection","position":8},{"hierarchy":{"lvl1":"Generic Workflow","lvl2":"Simulate and render a flow advection"},"content":"\n\nflow = data.NewRenderer(renderer.FlowRenderer)\nflow.SetFieldVariableNames(['U10', 'V10'])\n\nses.Show()\n\nses.DeleteRenderer(flow)\n\n","type":"content","url":"/notebooks/workflow-example#simulate-and-render-a-flow-advection","position":9},{"hierarchy":{"lvl1":"Generic Workflow","lvl2":"Volume render a 3D variable"},"type":"lvl2","url":"/notebooks/workflow-example#volume-render-a-3d-variable","position":10},{"hierarchy":{"lvl1":"Generic Workflow","lvl2":"Volume render a 3D variable"},"content":"\n\nvolume = data.NewRenderer(renderer.VolumeRenderer)\nvolume.SetVariableName(\"V\")\n\ntf = volume.GetPrimaryTransferFunction()\ntf.SetOpacityList([1, 0, 0, 1])\n\nses.GetCamera().ViewAll()\nses.Show()\n\n# Show a colorbar for the volume rendering\ntf.ShowMatPlotLibColorbar(label=\"V\")\n\n","type":"content","url":"/notebooks/workflow-example#volume-render-a-3d-variable","position":11},{"hierarchy":{"lvl1":"Generic Workflow","lvl2":"Scale the dataset Z axis"},"type":"lvl2","url":"/notebooks/workflow-example#scale-the-dataset-z-axis","position":12},{"hierarchy":{"lvl1":"Generic Workflow","lvl2":"Scale the dataset Z axis"},"content":"Vapor will automatically scale the Z axis of a dataset to produce reasonable results.\nThis can be manually adjusted as shown below.\n\nscales = data.GetTransform().GetScales()\nprint(\"Default dataset scaling =\", scales);\nscales[2] *= 0.3\ndata.GetTransform().SetScales(scales)\nprint(\"New dataset scaling =\", data.GetTransform().GetScales());\nses.Show()\n\n","type":"content","url":"/notebooks/workflow-example#scale-the-dataset-z-axis","position":13},{"hierarchy":{"lvl1":"Generic Workflow","lvl2":"Add axis annotations to the rendering"},"type":"lvl2","url":"/notebooks/workflow-example#add-axis-annotations-to-the-rendering","position":14},{"hierarchy":{"lvl1":"Generic Workflow","lvl2":"Add axis annotations to the rendering"},"content":"\n\nannotations = ses.GetAxisAnnotations()\nannotations.SetAxisAnnotationEnabled(True)\nses.Show()\n\n","type":"content","url":"/notebooks/workflow-example#add-axis-annotations-to-the-rendering","position":15},{"hierarchy":{"lvl1":"Generic Workflow","lvl2":"Export the session for use in the Vapor GUI application"},"type":"lvl2","url":"/notebooks/workflow-example#export-the-session-for-use-in-the-vapor-gui-application","position":16},{"hierarchy":{"lvl1":"Generic Workflow","lvl2":"Export the session for use in the Vapor GUI application"},"content":"Sessions created in Python can be saved as a .vs3 file.\nThese files can then be opened in the Vapor GUI application and explored interactively.\nConversely, sessions created in the Vapor GUI can be loaded into Python with Session.Load(path)\n\nSince this example uses a dynamically generated dataset, the session cannot be saved as\nit would point to a dataset that does not exist on disk. If you were using a physical dataset,\nthis would work.\n\nses.Save(\"tutorial.vs3\")","type":"content","url":"/notebooks/workflow-example#export-the-session-for-use-in-the-vapor-gui-application","position":17},{"hierarchy":{"lvl1":"Rendering XArray data with Vapor"},"type":"lvl1","url":"/notebooks/xarray-example","position":0},{"hierarchy":{"lvl1":"Rendering XArray data with Vapor"},"content":"While it is recommended to import data into Vapor using session.LoadDataset(), Vapor also supports importing data from XArray datasets.\n\nThe following cell will download sample data from NCAR’s \n\nResearch Data Archives.\n\nimport os\nimport requests\nimport zipfile\nurl = 'https://data.rda.ucar.edu/ds897.7/Katrina.zip'\nextract_to = './data'\nzip_name = \"Katrina.zip\"\ndata_file = './data/wrfout_d02_2005-08-29_02.nc'\n\n# Check if the data file already exists\nif not os.path.exists(data_file):\n    # Download zip\n    with requests.get(url, stream=True) as r:\n        r.raise_for_status()\n        with open(zip_name, 'wb') as f:\n            for chunk in r.iter_content(chunk_size=8192):\n                f.write(chunk)\n    # Extract the file\n    with zipfile.ZipFile(zip_name, 'r') as zip_ref:\n        zip_ref.extractall(extract_to)\n\n    # Clean up the zip file\n    os.remove(zip_name)\n\n    print(f\"Data downloaded and extracted to {data_file}\")\nelse:\n    print(f\"Data file already exists at {data_file}, skipping download and extraction.\")\n\n\nIn order to pass XArray data to Vapor, create a data set within your vapor session using Session.CreatePythonDataset().\n\nfrom vapor import session, renderer, dataset, camera\nimport xarray as xr\n\nses = session.Session()\ndata = ses.CreatePythonDataset()\n\nFirst we will load the dataset with XArray\n\nds = xr.open_dataset(\"data/wrfout_d02_2005-08-29_02.nc\")\nds\n\nWe can add variables from our XArray dataset to our Vapor dataset using dataset.AddXarrayDataset(). We should be careful though -- once the data is loaded with XArray, Vapor cannot determine if a dimension is spatial or temporal. Because of this, we should make sure the data array we pass contains only spatial dimensions.\n\nU10 = ds[\"U10\"]\nU10\n\nIn this case, U10 should be a two dimensional variable (longitude and latitude). But notice that in the DataArray we just created we still have a time dimension. Because of this, Vapor will incorrectly treat it as a 3 dimensional variable. Before passing the DataArray to Vapor, we should remove the temporal dimension.\n\nU10 = ds[\"U10\"].squeeze(\"Time\")\nU10\n\nNow, we can add this variable to our Vapor dataset with dataset.AddXArrayData(). The first parameter will be the variable name that we want to appear in our Vapor dataset, while the second parameter is the XArray DataArray.\n\ndata.AddXArrayData(\"U10\", U10)\n\nNow, we can render our data using any of Vapor’s renderers.\n\n# Create a renderer for the data\nren = data.NewRenderer(renderer.WireFrameRenderer)\nren.SetVariableName(\"U10\")\n\n# Show the rendering\nses.GetCamera().ViewAll()\nses.Show()\n\nses.DeleteRenderer(ren)\n\nThe same process can be used to render a 3D variable\n\ndata.AddXArrayData(\"U\", ds[\"U\"].squeeze(\"Time\"))\n\nren = data.NewRenderer(renderer.WireFrameRenderer)\nren.SetVariableName(\"U\")\nses.GetCamera().LookAt([ 138.64364963, -213.94716727,  293.46022828],\n                       [157., 154.,   0.],\n                       [0.04815987, 0.62133843, 0.78206086])\n\nses.Show()","type":"content","url":"/notebooks/xarray-example","position":1}]}